{{if and .PercentileEnabled .MaxTasksGTZero}}
type metricRecordResetables_retry{{if .RetriesEnabled}}Enabled{{else}}Disabled{{end}}_variance{{if .VarianceEnabled}}Enabled{{else}}Disabled{{end}} struct {
	numTasks                           int
	numPass                            int
	numFail                            int
	{{if .RetriesEnabled}}numRetry                           int
	{{end}}numPanic                           int
	sumLag                             time.Duration
	lag                                time.Duration
	minTaskDuration, maxTaskDuration   time.Duration
	minQueueDuration, maxQueueDuration time.Duration
	{{if .VarianceEnabled}}
	welfords struct {
		queue welfordVariance
		task  welfordVariance
	}
	{{end}}
}
{{end}}
type metricRecord_retry{{if .RetriesEnabled}}Enabled{{else}}Disabled{{end}}_maxTasks{{if not .MaxTasksGTZero}}Not{{end}}GTZero_percentile{{if .PercentileEnabled}}Enabled{{else}}Disabled{{end}}_variance{{if .VarianceEnabled}}Enabled{{else}}Disabled{{end}} struct {
	// fields that are preserved
	intervalID       time.Time
	numIntervalTasks int
	{{if .MaxTasksGTZero}}
	totalNumTasks int
	{{end}}

	sumTaskDuration, sumQueueDuration big.Int

	metricRecordResetables_retry{{if .RetriesEnabled}}Enabled{{else}}Disabled{{end}}_variance{{if .VarianceEnabled}}Enabled{{else}}Disabled{{end}}

	{{if .PercentileEnabled}}
	latencies latencyLists
	{{end}}
}

func (mr *metricRecord_retry{{if .RetriesEnabled}}Enabled{{else}}Disabled{{end}}_maxTasks{{if not .MaxTasksGTZero}}Not{{end}}GTZero_percentile{{if .PercentileEnabled}}Enabled{{else}}Disabled{{end}}_variance{{if .VarianceEnabled}}Enabled{{else}}Disabled{{end}}) reset() {
	mr.sumTaskDuration.SetUint64(0)
	mr.sumQueueDuration.SetUint64(0)
	mr.metricRecordResetables_retry{{if .RetriesEnabled}}Enabled{{else}}Disabled{{end}}_variance{{if .VarianceEnabled}}Enabled{{else}}Disabled{{end}} = metricRecordResetables_retry{{if .RetriesEnabled}}Enabled{{else}}Disabled{{end}}_variance{{if .VarianceEnabled}}Enabled{{else}}Disabled{{end}}{
		minTaskDuration:  math.MaxInt64,
		minQueueDuration: math.MaxInt64,
	}
	{{if .PercentileEnabled}}
	mr.latencies.queue.reset()
	mr.latencies.task.reset()
	{{end}}
}
