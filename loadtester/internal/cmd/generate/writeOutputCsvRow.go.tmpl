func (lt *Loadtest) writeOutputCsvRow_retry{{if .RetriesEnabled}}Enabled{{else}}Disabled{{end}}_maxTasks{{if .MaxTasksGTZero}}GTZero{{else}}NotGTZero{{end}}_percentile{{if .PercentileEnabled}}Enabled{{else}}Disabled{{end}}_variance{{if .VarianceEnabled}}Enabled{{else}}Disabled{{end}}() func(metricRecord_retry{{if .RetriesEnabled}}Enabled{{else}}Disabled{{end}}_maxTasks{{if not .MaxTasksGTZero}}Not{{end}}GTZero_percentile{{if .PercentileEnabled}}Enabled{{else}}Disabled{{end}}_variance{{if .VarianceEnabled}}Enabled{{else}}Disabled{{end}}) {
	{{if .PercentileEnabled}}
	var queuePercentiles, taskPercentiles [numPercentiles]NullableDuration
	{{end}}

	var bigAvgQueueLatency, bigAvgTaskLatency big.Int

	return func(mr metricRecord_retry{{if .RetriesEnabled}}Enabled{{else}}Disabled{{end}}_maxTasks{{if not .MaxTasksGTZero}}Not{{end}}GTZero_percentile{{if .PercentileEnabled}}Enabled{{else}}Disabled{{end}}_variance{{if .VarianceEnabled}}Enabled{{else}}Disabled{{end}}) {

		cd := &lt.csvData
		if cd.writeErr != nil {
			return
		}

		now := time.Now()

		{{if .MaxTasksGTZero}}

		var percent csv.Field
		{
			const percentColMaxBytes = 6 // "100.00"
			buf := make([]byte, 0, percentColMaxBytes)

			high := mr.totalNumTasks * percentDonePrecisionFactor / lt.maxTasks
			low := high % (percentDonePrecisionFactor/100)
			high /= (percentDonePrecisionFactor/100)

			buf = strconv.AppendInt(buf, int64(high), 10)

			if low < 10 {
				buf = append(buf, '.', '0')
			} else {
				buf = append(buf, '.')
			}

			buf = strconv.AppendInt(buf, int64(low), 10)
			percent = csv.Raw(buf)
		}
		{{end}}

		bigNumTasks := big.NewInt(int64(mr.numTasks))

		{{if .PercentileEnabled}}
		mr.latencies.queue.readPercentiles(&queuePercentiles)
		mr.latencies.task.readPercentiles(&taskPercentiles)
		{{end}}

		err := csv.WriteRow(cd.writer,
			csv.Time(now),
			csv.Time(mr.intervalID),
			csv.Uint(uint(mr.numIntervalTasks)),
			csv.Uint(uint64(mr.lag)),
			csv.Uint(uint64(mr.sumLag)),
			csv.Uint(uint(mr.numTasks)),
			csv.Uint(uint(mr.numPass)),
			csv.Uint(uint(mr.numFail)),
			{{if .RetriesEnabled}}csv.Uint(uint(mr.numRetry)),
			{{end}}csv.Uint(uint(mr.numPanic)),
			csv.Uint(uint64(mr.minQueueDuration)),
			csv.Uint(uint64(time.Duration(bigAvgQueueLatency.Div(&mr.sumQueueDuration, bigNumTasks).Int64()))),
			csv.Uint(uint64(mr.maxQueueDuration)),
			csv.Uint(uint64(mr.minTaskDuration)),
			csv.Uint(uint64(time.Duration(bigAvgTaskLatency.Div(&mr.sumTaskDuration, bigNumTasks).Int64()))),
			csv.Uint(uint64(mr.maxTaskDuration)),{{if .PercentileEnabled}}
			NullableDurationToCSVField(queuePercentiles[0]),
			NullableDurationToCSVField(queuePercentiles[1]),
			NullableDurationToCSVField(queuePercentiles[2]),
			NullableDurationToCSVField(queuePercentiles[3]),
			NullableDurationToCSVField(queuePercentiles[4]),
			NullableDurationToCSVField(queuePercentiles[5]),
			NullableDurationToCSVField(queuePercentiles[6]),
			NullableDurationToCSVField(queuePercentiles[7]),
			NullableDurationToCSVField(queuePercentiles[8]),
			NullableDurationToCSVField(queuePercentiles[9]),
			NullableDurationToCSVField(taskPercentiles[0]),
			NullableDurationToCSVField(taskPercentiles[1]),
			NullableDurationToCSVField(taskPercentiles[2]),
			NullableDurationToCSVField(taskPercentiles[3]),
			NullableDurationToCSVField(taskPercentiles[4]),
			NullableDurationToCSVField(taskPercentiles[5]),
			NullableDurationToCSVField(taskPercentiles[6]),
			NullableDurationToCSVField(taskPercentiles[7]),
			NullableDurationToCSVField(taskPercentiles[8]),
			NullableDurationToCSVField(taskPercentiles[9]),{{end}}{{if .VarianceEnabled}}
			csv.Float64(mr.welfords.queue.Variance(mr.numTasks)),
			csv.Float64(mr.welfords.task.Variance(mr.numTasks)),{{end}}{{if .MaxTasksGTZero}}
			percent,{{end}}
		)
		if err != nil {
			cd.setErr(err) // sets error state in multiple goroutine safe way
		}
	}
}
