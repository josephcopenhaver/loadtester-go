func (lt *Loadtest) writeOutputCsvRow_maxTasks{{if .MaxTasksGTZero}}GTZero{{else}}NotGTZero{{end}}_percentile{{if .PercentileEnabled}}Enabled{{else}}Disabled{{end}}(mr metricRecord) {

	cd := &lt.csvData
	if cd.writeErr != nil {
		return
	}

	nowStr := timeToString(time.Now())

	{{if .MaxTasksGTZero}}
	var percent string
	{
		high := mr.totalNumTasks * percentDonePrecisionFactor / lt.maxTasks
		low := high % (percentDonePrecisionFactor/100)
		high /= (percentDonePrecisionFactor/100)

		var sep string
		if low < 10 {
			sep = ".0"
		} else {
			sep = "."
		}

		percent = strconv.Itoa(high) + sep + strconv.Itoa(low)
	}
	{{end}}

	fields := []string{
		nowStr,
		timeToString(mr.intervalID),
		strconv.Itoa(mr.numIntervalTasks),
		mr.lag.String(),
		mr.sumLag.String(),
		strconv.Itoa(mr.numTasks),
		strconv.Itoa(mr.numPass),
		strconv.Itoa(mr.numFail),
		strconv.Itoa(mr.numRetry),
		strconv.Itoa(mr.numPanic),
		mr.minQueuedDuration.String(),
		(mr.sumQueuedDuration / time.Duration(mr.numTasks)).String(),
		mr.maxQueuedDuration.String(),
		mr.sumQueuedDuration.String(),
		mr.minTaskDuration.String(),
		(mr.sumTaskDuration / time.Duration(mr.numTasks)).String(),
		mr.maxTaskDuration.String(),
		mr.sumTaskDuration.String(),{{if .PercentileEnabled}}
		mr.queuedDurations.stringPercentile(lt.latencyPercentile),
		mr.taskDurations.stringPercentile(lt.latencyPercentile),{{end}}{{if .MaxTasksGTZero}}
		percent,{{end}}
	}

	if err := cd.writer.Write(fields); err != nil {
		cd.setErr(err) // sets error state in multiple goroutine safe way
	}
}
