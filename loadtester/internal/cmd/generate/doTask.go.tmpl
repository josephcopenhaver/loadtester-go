func (lt *Loadtest) doTask_retries{{if .RetriesEnabled}}Enabled{{else}}Disabled{{end}}_metrics{{if .MetricsEnabled}}Enabled{{else}}Disabled{{end}}(ctx context.Context, workerID int, twm taskWithMeta) {
	{{if .MetricsEnabled}}
	var respFlags taskResultFlags
	{
		taskStart := time.Now()
		defer func(){
			taskEnd := time.Now()

			lt.resultsChan <- taskResult{
				taskResultFlags: respFlags,
				QueueDuration:  taskStart.Sub(twm.enqueueTime),
				TaskDuration:    taskEnd.Sub(taskStart),
				Meta:            twm.meta,
			}
		}()
	}
	{{else}}
	defer lt.resultWaitGroup.Done()
	{{end}}

	// phase is the name of the step which has possibly caused a panic
	phase := "do"
	{{if .RetriesEnabled}}
	var rt *retryTask
	if v, ok := twm.doer.(*retryTask); ok {
		rt = v
		phase = "retry"
		defer func() {
			*rt = retryTask{}
			lt.retryTaskPool.Put(v)
		}()
	}
	{{- end}}
	defer func() {

		if r := recover(); r != nil {
			{{if .MetricsEnabled}}
			respFlags.Panicked = 1
			respFlags.Errored = 1
			{{end}}

			const evtName = "worker recovered from panic"

			switch v := r.(type) {
			case error:
				lt.logger.LogAttrs(ctx, slog.LevelError,
					evtName,
					slog.Int("worker_id", workerID),
					slog.String("phase", phase),
					slog.Any("error", v),
				)
			case []byte:
				lt.logger.LogAttrs(ctx, slog.LevelError,
					evtName,
					slog.Int("worker_id", workerID),
					slog.String("phase", phase),
					slog.String("error", string(v)),
				)
			case string:
				lt.logger.LogAttrs(ctx, slog.LevelError,
					evtName,
					slog.Int("worker_id", workerID),
					slog.String("phase", phase),
					slog.String("error", v),
				)
			default:
				const msg = "unknown cause"

				lt.logger.LogAttrs(ctx, slog.LevelError,
					evtName,
					slog.Int("worker_id", workerID),
					slog.String("phase", phase),
					slog.String("error", msg),
				)
			}
		}
	}()
	err := twm.doer.Do(ctx, workerID)
	phase = "" // done, no panic occurred
	if err == nil {
		{{if .MetricsEnabled}}respFlags.Passed = 1{{end}}
		return
	}

	lt.logger.LogAttrs(ctx, slog.LevelWarn,
		"task error",
		slog.Int("worker_id", workerID),
		slog.Any("error", err),
	)

	{{if .MetricsEnabled}}respFlags.Errored = 1{{end}}

	{{if .RetriesEnabled}}
	var dr DoRetryer
	if rt != nil {
		dr = rt.DoRetryer
	} else if v, ok := twm.doer.(DoRetryer); ok {
		dr = v
	} else {
		return
	}

	phase = "can-retry"
	if v, ok := dr.(DoRetryChecker); ok && !v.CanRetry(ctx, workerID, err) {
		phase = "" // done, no panic occurred
		return
	}
	phase = "" // done, no panic occurred

	// queue a new retry task
	{
		rt := lt.retryTaskPool.Get().(*retryTask)

		*rt = retryTask{dr, err}

		lt.retryTaskChan <- rt
	}

	{{if .MetricsEnabled}}respFlags.RetryQueued = 1{{end}}

	{{- end}}
	return
}
